# -*- coding: utf-8 -*-
"""Modelling.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XbpcCOUj2LCxOrJEc_wm7YB0LQhsr9sy

# Downloads

# First, as per usual, imports.
"""

import pandas as pd
import torch
import torch.nn.functional as F
import os
import pickle
from torch.utils.data import Dataset, DataLoader
from torch import nn
from transformers import AutoTokenizer, AutoModelForSequenceClassification, AdamW
from sklearn.model_selection import train_test_split

"""# Extracting data.

Mount google drive.
"""

from google.colab import drive
drive.mount('/content/drive')

"""Custom dataset class for sentiment analysis."""

class SentimentDataset(Dataset):
    def __init__(self, data, tokenizer, max_length):
        self.reviews = data['Processed Review'].values
        self.labels = data['Sentiment'].values
        self.tokenizer = tokenizer
        self.max_length = max_length

    def __len__(self):
        return len(self.reviews)

    def __getitem__(self, idx):
        review = str(self.reviews[idx])
        label = int(self.labels[idx])

        # Tokenize and encode the review
        inputs = self.tokenizer(review,
                                max_length=self.max_length,
                                padding='max_length',
                                truncation=True,
                                return_tensors="pt")

        input_ids = inputs['input_ids'].squeeze()
        attention_mask = inputs['attention_mask'].squeeze()

        return {
            'input_ids': input_ids,
            'attention_mask': attention_mask,
            'label': torch.tensor(label, dtype=torch.long)
        }

"""# Load model and tokenizer"""

model_name = "tabularisai/robust-sentiment-analysis"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForSequenceClassification.from_pretrained(model_name, num_labels=2, ignore_mismatched_sizes=True)

"""Modify the classifier to suit binary classification."""

model.classifier = nn.Linear(model.config.hidden_size, 2)

"""# Load Dataset"""

from sklearn.model_selection import train_test_split
import pandas as pd

# Load the dataset
data = pd.read_csv("/content/drive/MyDrive/Data-sets/AmazonReviews/preprocessed/vectorized_data_hf.csv")

# First split: 70% training, 30% (which will be split into validation and testing)
train_data, temp_data = train_test_split(data, test_size=0.3, random_state=42)

# Second split: 20% validation and 10% testing from the 30% temp_data
val_data, test_data = train_test_split(temp_data, test_size=1/3, random_state=42)

# Display the sizes of the splits
print(f"Training data: {len(train_data)}")
print(f"Validation data: {len(val_data)}")
print(f"Testing data: {len(test_data)}")

"""Data and optimizers."""

# Hyperparameters
BATCH_SIZE = 16
EPOCHS = 3
LEARNING_RATE = 2e-5
MAX_LEN = 512

# Create Dataset objects
train_dataset = SentimentDataset(train_data, tokenizer, MAX_LEN)
val_dataset = SentimentDataset(val_data, tokenizer, MAX_LEN)

# DataLoader objects
train_loader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=BATCH_SIZE, shuffle=False)

# Define optimizer
optimizer = AdamW(model.parameters(), lr=LEARNING_RATE)

"""# Training"""

def train_model(model, train_loader, val_loader, epochs):
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    model = model.to(device)

    for epoch in range(epochs):
        model.train()
        total_train_loss = 0

        for batch in train_loader:
            optimizer.zero_grad()

            input_ids = batch['input_ids'].to(device)
            attention_mask = batch['attention_mask'].to(device)
            labels = batch['label'].to(device)

            # Forward pass
            outputs = model(input_ids=input_ids, attention_mask=attention_mask, labels=labels)
            loss = outputs.loss
            total_train_loss += loss.item()

            # Backward pass and optimization
            loss.backward()
            optimizer.step()

        avg_train_loss = total_train_loss / len(train_loader)

        # Validation loop
        model.eval()
        total_val_loss = 0
        correct_predictions = 0

        with torch.no_grad():
            for batch in val_loader:
                input_ids = batch['input_ids'].to(device)
                attention_mask = batch['attention_mask'].to(device)
                labels = batch['label'].to(device)

                outputs = model(input_ids=input_ids, attention_mask=attention_mask, labels=labels)
                loss = outputs.loss
                total_val_loss += loss.item()

                logits = outputs.logits
                predictions = torch.argmax(F.softmax(logits, dim=-1), dim=-1)
                correct_predictions += torch.sum(predictions == labels)

        avg_val_loss = total_val_loss / len(val_loader)
        val_accuracy = correct_predictions.double() / len(val_loader.dataset)

        print(f"Epoch {epoch + 1}/{epochs}")
        print(f"Training loss: {avg_train_loss:.3f}")
        print(f"Validation loss: {avg_val_loss:.3f}")
        print(f"Validation accuracy: {val_accuracy:.3f}\n")

    return model

"""# Fine-tune the model"""

tuned_model = train_model(model, train_loader, val_loader, EPOCHS)

"""Saving the model for future deployment."""

# Save the model to a .pkl file
output_dir = '/content/drive/MyDrive/Compiled Models/'
model_filename = "tuned_sentiment_model.pkl"

# Saving the model as a pickle file
with open(os.path.join(output_dir, model_filename), 'wb') as f:
    pickle.dump(tuned_model, f)

print(f"Model saved as {model_filename}")

